import React, { useEffect, useRef, useState } from "react";
import "../styles/peers.css";
import EditIcon from "../assets/edit.svg";
import QrCodeIcon from "../assets/qr.svg";
import DownloadIcon from "../assets/download.svg";
import DeleteIcon from "../assets/delete.svg";
import ToggleSwitch from "./ToggleSwitch";
import { QRCodeCanvas } from "qrcode.react";
import AvatarIcon from "../assets/avatar.svg";
import ArrowIcon from "../assets/arrow.svg";

const PeerCard = ({ peer, onDelete, onEdit }) => {
  const [isQRModalOpen, setIsQRModalOpen] = useState(false);
  const [isActive, setIsActive] = useState(peer.active);
  const nameRef = useRef(null);
  const textRef = useRef(null);
  const [isScrolling, setIsScrolling] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–ª–∏–Ω–Ω–µ–µ –ª–∏ —Ç–µ–∫—Å—Ç, —á–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  useEffect(() => {
    const checkOverflow = () => {
      if (nameRef.current && textRef.current) {
        const containerWidth = nameRef.current.offsetWidth;
        const textWidth = textRef.current.scrollWidth;
        setIsScrolling(textWidth > containerWidth);
      }
    };

    checkOverflow();
    window.addEventListener("resize", checkOverflow);
    return () => window.removeEventListener("resize", checkOverflow);
  }, [peer.name]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∏—Ä–∞
  const togglePeer = () => setIsActive((prev) => !prev);

  // –û—Ç–∫—Ä—ã—Ç–∏–µ / –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å QR-–∫–æ–¥–æ–º
  const toggleQRModal = () => setIsQRModalOpen((prev) => !prev);

  // ‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const downloadConfig = () => {
    const configData = `[Peer]\nPublicKey = ${peer.publicKey}\nAllowedIPs = ${peer.ip}/32`;
    const blob = new Blob([configData], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${peer.name}.conf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  return (
    <div className="peer-card">
      {/* üîπ 1. –ë–ª–æ–∫ –ê–≤–∞—Ç–∞—Ä–∞ –∏ –°—Ç–∞—Ç—É—Å–∞ */}
      <div className="peer-avatar-block">
        <div className="peer-avatar-wrapper">
          <div className="peer-avatar">
            <img src={peer.avatar || AvatarIcon} alt="Avatar" />
          </div>
          <span className={`status-dot ${isActive ? "online" : "offline"}`} />
        </div>
      </div>

      {/* üîπ 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
      <div className="peer-info-block">
        <div className="peer-name-box" ref={nameRef}>
          <div className="peer-name">
            <span ref={textRef} className={isScrolling ? "scrollable" : ""}>
              {peer.name}
            </span>
          </div>
          {/* üîπ –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—ë—Ç `peer` –≤ `onEdit` */}
          <button className="edit-icon" onClick={() => onEdit(peer)}>
            <img src={EditIcon} alt="Edit" />
          </button>
        </div>
        <div className="peer-ip">IP: {peer.ip}</div>
        <div className="peer-last-seen">{peer.lastSeen}</div>
      </div>

      {/* üîπ 3. –ú–µ–Ω–µ–¥–∂–µ—Ä-–±–ª–æ–∫ (–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è + –¢—Ä–∞—Ñ–∏–∫) */}
      <div className="peer-manager-block">
        <div className="peer-actions">
          <ToggleSwitch isActive={isActive} onToggle={togglePeer} />
          <button className="peer-button" onClick={toggleQRModal}>
            <img src={QrCodeIcon} alt="QR Code" className="card-icon" />
          </button>
          <button className="peer-button" onClick={downloadConfig}>
            <img src={DownloadIcon} alt="Download" className="card-icon" />
          </button>
          <button
            className="peer-button delete"
            onClick={() => onDelete(peer.ip)}
          >
            <img src={DeleteIcon} alt="Delete" className="card-icon" />
          </button>
        </div>
        {/* üîπ –ë–ª–æ–∫ —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º (–û—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ) */}
        <div className="peer-traffic-block">
          <div className="traffic-item">
            <img src={ArrowIcon} alt="Arrow Down" className="arrow-icon-down" />
            <div className="traffic-info">
              <p className="traffic-value">45.26 Gb</p>
              <p className="traffic-speed">0 B/s</p>
            </div>
          </div>
          <div className="traffic-item">
            <img src={ArrowIcon} alt="Arrow Down" className="arrow-icon-up" />
            <div className="traffic-info">
              <p className="traffic-value">19.26 Gb</p>
              <p className="traffic-speed">0 B/s</p>
            </div>
          </div>
        </div>
      </div>

      {/* üîπ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å QR-–∫–æ–¥–æ–º */}
      {isQRModalOpen && (
        <div className="modal">
          <div className="modal-content">
            <h3>QR-–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>
            <QRCodeCanvas value={`wireguard://${peer.ip}`} size={200} />
            <div className="modal-buttons">
              <button onClick={toggleQRModal}>–ó–∞–∫—Ä—ã—Ç—å</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PeerCard;
